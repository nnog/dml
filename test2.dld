COL: ':[lLdD]?[rRoOgGbBvV]'
{
	start: ':' value_mod? hue;
	value_mod: '[lLdD]';
	hue: '[rRoOgGbBvV]';
};

ID: '\w+';
WS: '[ \t\n]+' (%ignore);
DOWN_EDGE: '\|';

start: unconnected_node (connected_node)*;
connected_node: DOWN_EDGE unconnected_node;
unconnected_node: node_name COL?;
node_name: ID;

###

def preparse(src):
	tikz_libraries.extend(["matrix", "chains", "arrows", "positioning"])
	return src
	
def postparse(ast):

	print r"\tikzstyle{mynodestyle}=[minimum size=5mm, draw];"
	print r"\tikzstyle{myedgestyle}=[->, >=latex];"

	from abstract import Graph, GraphNode, GraphEdge
	from color import Palette
	import math
	
	g = Graph()
	p = Palette(sat=0.5)
	
	for node in ast.select("unconnected_node"):
		name = node.tail[0].tail[0]
		huenodes = node.tail[1].select("hue")
		valnodes = node.tail[1].select("value_mod")
		col = [1,1,1]
		if huenodes[0]:
			col = p.decodeint(
				hue = huenodes[0].tail[0],
				value_mod = valnodes[0].tail[0] if valnodes else None
			)
		g.add(GraphNode(name, "mynodestyle, fill={rgb:red,%s;green,%s;blue,%s}"%(col[0], col[1], col[2])))
		if len(g.nodes) > 1:
			g.add(GraphEdge(len(g.nodes)-2, len(g.nodes)-1, "myedgestyle"))

	
	g.emit_node_matrix(numperrow=1)
	g.emit_chain()
