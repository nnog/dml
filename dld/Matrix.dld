#include Comments
#include ParBlock
########## python
from abstract import Graph, GraphNode, GraphEdge

def preparse(src):
    tikz_libraries.extend(["matrix", "chains", "arrows", "positioning", "scopes", "shapes", "automata"])
    return src
    
def postparse(ast):
    g = Graph(styles)

    usrstyles = {}
    for sdef in ast.select("styledef"):
        usrstyles[sdef.select1("stylename *").strip()] = sdef.select1("block *")
    
    y = 0
    for row in ast.select("row"):
        x = 0
        for el in row.select("row > *"):
            if el.head == 'element':
                name = el.select1("element > block *")
                ident = el.select("element > ref ident *")
                style = el.select("element > style > stylename *")
                try:
                    nstyle = usrstyles[style[0].strip()] if len(style) else ''
                except KeyError:
                    raise KeyError("Style %s was referenced but not found to be set. Here's what's set:  %s"%(style[0], usrstyles))
                newnode = GraphNode(name, ident=ident[0] if len(ident) else None, style=nstyle, pos=(x,y))
                g.add(newnode)
                for e in el.select("element > edge"):
                    dest = e.select1("ref ident *")
                    label = e.select("block *")
                    g.add(GraphEdge(newnode.ident, dest, label=label[0] if len(label) else None))
            x += 1
        y += 1

    # Externally declared edges:
    for edgegroup in ast.select("externedge"):
        src = edgegroup.select1("externedge > ref ident *")
        for e in edgegroup.select("edge"):
            dest = e.select1("ref ident *")
            label = e.select("block *")
            g.add(GraphEdge(src, dest, label=label[0] if len(label) else None))
        
            

    g.emit_node_matrix()
    #g.route_edges()
    g.emit_edge_paths()


######## grammar
NAME: '\w[\w ]*';
LSYM: '[%\\,=!?]';
WS: '[ \t\f]+' (%ignore);
NL: '\n' (%newline) (%ignore);
EDGEBEGIN: '-';
EDGEEND: '->';
LPRN: '\(';
RPRN: '\)';
LBR: '{';
RBR: '}';
COLON: ':';
LSB: '\[';
RSB: '\]';
PIPE: '\|';
DOT: '\.';

start: row+ (styledef|externedge)*;
row: LSB (spacer | element)+ RSB
   | PIPE (spacer | element)+ PIPE;
spacer: DOT;
element: ref? block style? edge*;
style: COLON stylename;
stylename: NAME;
edge: EDGEBEGIN block? EDGEEND ref;
ref: LPRN ident RPRN;
ident: NAME;
styledef: stylename block;
externedge: ref edge*;
