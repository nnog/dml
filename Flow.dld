#include Comments
#include Color
########## python
from abstract import Graph, GraphNode, GraphEdge
import math

def preparse(src):
	tikz_libraries.extend(["chains", "arrows", "positioning", "scopes"])
	return src
	
def postparse(ast):

	print r"\tikzstyle{mynodestyle}=[minimum size=5mm, draw];"
	print r"\tikzstyle{myedgestyle}=[->, >=latex];"

	g = Graph()
	
	for node in ast.select("unconnected_node"):
		name = node.select("node_name")[0].tail[0]
		c = node.select("col")
		colstr = "none" if len(c) == 0 else c[0].tail[0]
		g.add(GraphNode(name, "mynodestyle, fill="+colstr))
		if len(g.nodes) > 1:
			g.add(GraphEdge(len(g.nodes)-2, len(g.nodes)-1, "myedgestyle"))
	
	g.emit_node_matrix(numperrow=1)
	g.emit_chain()


######## grammar
WS: '\s+' (%ignore);
BRANCH: '\/' '\|*' '[\\]';
SINGLE: '\|';
ID: '[\w\?\,\.\t ]+';

start: start_node (edge children)*;
edge: branch | single_edge;
branch: BRANCH;
single_edge: SINGLE;
start_node: node;
children: node+;
node: ID COL?;
