#include Comments
#include TikzStatements
########## python
from abstract import Graph, GraphNode, GraphEdge
import math

def preparse(src):
    tikz_libraries.extend(["matrix", "chains", "arrows", "positioning", "scopes"])
    return src
    
def postparse(ast):
    print r"\tikzstyle{nodestyle}=[draw, align=center];"
    print r"\tikzstyle{termnodestyle}=[rounded rectangle, draw, align=center, text=white, draw=black, fill=gray];"
    print r"\tikzstyle{qnodestyle}=[diamond, draw]"
    print r"\tikzstyle{line}=[draw];"
    print r"\tikzstyle{arrow}=[line, -latex'];"

    g = Graph()

    srcnode = None
    nodecursor = None
    for br in ast.select("branch"):
        first_branch = br.index_in_parent == 0
        init = br.child("initial").child()
        ident = init.child("identifier").child() if init.has("identifier") else None 
        if init.head == "nodedef":
            if not first_branch:
                raise Exception("Flow: can't handle disjunct trees. :(")
                continue
            name = init.child("nodelabel").child()
            srcnode = nodecursor = GraphNode(name, "termnodestyle", ident, pos=(0,0))
            g.add(srcnode)
        elif init.head == "noderef":
            srcnode = nodecursor = g.node_search(ident)
        assert len(br.select("edge")) == len(br.select("child"))
        prev_edge_iip = 0
        for i, edge in enumerate(br.select("edge")):
            if edge.index_in_parent > prev_edge_iip + 1:
                srcnode = nodecursor

            nextpos = (srcnode.pos[0], srcnode.pos[1]+1)
            elpos = 'right'
            esface = None
            if edge.child() == "/":
                nextpos = (srcnode.pos[0]-1, srcnode.pos[1])
                elpos = 'above'
                esface = 'west'
            elif edge.child() == "\\":
                nextpos = (srcnode.pos[0]+1, srcnode.pos[1])
                elpos = 'above'
                esface = 'east'
            
            destchild = br.select("child")[i]
            if destchild.has("nodedef"): #add new node & edge
                destdef = destchild.child("nodedef")
                name = destdef.child("nodelabel").child()
                ident = destdef.child("identifier").child() if destdef.has("identifier") else None 
                nodecursor = GraphNode(name, "nodestyle", ident, pos=nextpos)
                g.add(nodecursor)
            elif destchild.has("noderef"): #lookup node & add edge
                destref = destchild.child("noderef")
                ident = destref.child("identifier").child()
                nodecursor = g.node_search(ident)
            elabel = destchild.child("edgelabel").child() if destchild.has("edgelabel") else None
            e = GraphEdge(srcnode.ident, nodecursor.ident, "arrow", elabel, elpos, esface)
            g.add(e)
            prev_edge_iip = edge.index_in_parent
    
    g.emit_node_matrix(rowsep="2.5em", colsep="2.5em")
    g.route_edges()
    g.emit_edge_paths()


######## grammar
LABEL: '\w[\w\?\,\. ]*';
WS: '[ \t\f]+' (%ignore);
NL: '\n' (%newline) (%ignore);
LEFT: '\/';
RIGHT: '[\\]';
DOWN: '\|';
LPRN: '\(';
RPRN: '\)';
COLON: ':';

start: branch*;
branch: initial branchgroup*;
@branchgroup: edge branchgroup? child;

initial: nodedef | noderef;
child: (edgelabel COLON)? (nodedef|noderef);

noderef: LPRN identifier RPRN;
nodedef: (LPRN identifier RPRN)? nodelabel;

edge: DOWN | LEFT | RIGHT;
nodelabel: LABEL | tikzcode;
edgelabel: LABEL | tikzcode;
identifier: LABEL;
